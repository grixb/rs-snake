// pub trait Segment: Copy {
//     fn dir(self) -> Direction;
//     fn len(self) -> usize;    
// }
// impl<T: Copy> Segment for T where T: Into<(Direction, usize)> {
//     fn dir(self) -> Direction {
//         self.into().0
//     }

//     fn len(self) -> usize {
//         self.into().1
//     }
// }

// (x, y)
//pub type Pos = (isize, isize);

// pub struct PosIter<I, S> {
//     seg_itr: I,
//     seg: Option<S>,
//     pos: Pos,
//     idx: usize,
//     is_last: bool,
// }

// impl<'a, S: Segment + 'a, I: SegmentIter<'a, S>> Iterator for PosIter<I, S> {
//     type Item = Pos;

//     fn next(&mut self) -> Option<Self::Item> {
//         loop {
//             if self.seg.is_none() {
//                 if let Some(nxt_seg) = self.seg_itr.next() {
//                     self.seg = Some(*nxt_seg);
//                     continue;
//                 } else {
//                     if !self.is_last {
//                         self.is_last = true;
//                         break Some(self.pos);
//                     } else {
//                         break None;
//                     }
//                 }
//             } else {
//                 if self.idx + 1 >= self.seg.unwrap().len() {
//                     self.idx = 0;
//                     self.seg = None;
//                     continue;
//                 } else {
//                     let actual_pos = self.pos;
//                     self.pos = self.pos.next_pos(self.seg.unwrap().dir().opposite());
//                     self.idx += 1;
//                     break Some(actual_pos);
//                 }
//             }
//         }
//     }
// }

// impl<'a, S: Segment + 'a, I: SegmentIter<'a, S>> PosIter<I, S> {
//     pub fn new(seg_iter: I, start: Pos) -> PosIter<I, S> {
//         PosIter {
//             seg_itr: seg_iter,
//             seg: None,
//             pos: start,
//             idx: 0,
//             is_last: false,
//         }
//     }
// }